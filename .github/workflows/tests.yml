name: Tests  # Name of the workflow

# Trigger the workflow on push to main and pull requests
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest  # Use GitHub's latest Ubuntu runner

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
          python-version: "3.11"
          activate-environment: "env"
          auto-update-conda: true

      - name: Install GDAL
        run: |
          conda install -c conda-forge gdal=3.10.2 cmake

      # # Install system dependencies for pyarrow
      # - name: Install system dependencies
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y \
      #       cmake \
      #       libssl-dev \
      #       libboost-dev \
      #       libboost-system-dev \
      #       libboost-filesystem-dev \
      #       libgdal-dev \
      #       gdal-bin

      # # Step 2: Set up Python 3.11
      # - name: Setup Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: 3.11

      - name: Install Poetry
        uses: snok/install-poetry@v1  # Official Poetry installer for GitHub Actions
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true  # Create venv in project directory

      - name: Install dependencies
        run: |
          poetry install --with dev,test
          # poetry install --with dev, test, doc
          # python -m pip install --upgrade pip
          # pip install pytest  # Install pytest explicitly
          # If you have a requirements.txt, use:
          # pip install -r requirements.txt

      # Step 3: Run tests
      - name: Run tests
        run: poetry run pytest tests/  # Assumes "tests" is defined in package.json

      # (Optional) Step 5: Generate a coverage badge
      # - name: Create coverage badge
      #   uses: schneegans/dynamic-badges-action@v1
      #   if: always()
      #   with:
      #     auth: ${{ secrets.GITHUB_TOKEN }}
      #     label: Coverage
      #     status: ${{ github.workflow }}
      #     path: coverage/coverage-summary.json  # Path to your coverage report
      #     output: badges/coverage.svg